buildscript {
	ext {
		// NOTE: Version 2.0.0 of Spring Boot changed the task name used to create a bootable jar from 'bootRepackage'
		// to 'bootJar'. If version 1.5 or below are used, the file 'gradle/publish.gradle' will need to be updated
		// so the 'artifactoryPublish' task depends on 'bootRepackage', rather than 'bootJar'.
		springBootVersion = '2.2.6.RELEASE'
		groovyVersion = '2.4.13'
		spockVersion = '1.1-groovy-2.4'
	}
	repositories {
		maven { url 'https://repo1.uhc.com/artifactory/repo' }
		maven { url 'https://plugins.gradle.org/m2/' }
	}
	dependencies {
		classpath(
			'com.palantir.gradle.docker:gradle-docker:0.22.1',
			'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.2.1',
			'io.freefair.gradle:lombok-plugin:4.1.4', // This is the plugin recommended on lombok project site
			'net.researchgate:gradle-release:2.6.0',
			// jfog does not support Gradle 6 for now.
			//'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.0',
			'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1',
			"org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		)
	}
}
plugins{
	id "com.gorylenko.gradle-git-properties" version "2.2.3"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// Gradle scripts for providing CI/CD functionality. Comment them out as needed, based on project requirements.
apply from: 'gradle/acceptanceTest.gradle'
apply from: 'gradle/docker.gradle'
apply from: 'gradle/lombok.gradle'
apply from: 'gradle/integrationTest.gradle'
apply from: 'gradle/reports.gradle'
apply from: 'gradle/sourceJars.gradle'
apply from: 'gradle/fortify.gradle'

// Depends on artifacts built in sourceJars, so this plugin must be applied afterwards
// apply from: 'gradle/publish.gradle'

// Depends on tasks defined in docker and publish scripts, so this plugin must be applied after those two.
apply from: 'gradle/release.gradle'

// sourceCompatibility is the Language features that project is using.
// targetCompatibility is the JVM bytecode that compile will target.
sourceCompatibility = 8
targetCompatibility = 8

group = 'com.optum.ct'

description = """
This application provides a template for building microservices using Spring Boot.
It provides a fully functional CI/CD pipeline, Docker builds, deployments to the
Dev environment, reporting, versioning, and libraries common to applications as well
as unit and integration testing.
"""

repositories {
	// mavenLocal()
	maven { url 'https://repo1.uhc.com/artifactory/repo' }
}

configurations.all {
	// Remove extra Logging implementations
	exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
	exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	exclude group: 'log4j', module: 'log4j'
	// Jetty replaces tomcat
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
}

dependencies {
	compile(
		'org.springframework.boot:spring-boot-starter-actuator',
		'org.springframework.boot:spring-boot-starter-logging',
		'org.springframework.boot:spring-boot-starter-web',

		// Use Jetty instead of default Tomcat.
		'org.springframework.boot:spring-boot-starter-jetty'

	)

	runtime('org.springframework.boot:spring-boot-devtools')

	testCompile(
		'org.springframework.boot:spring-boot-starter-test',
		//"org.codehaus.groovy:groovy-all:$groovyVersion",
		//"org.spockframework:spock-core:$spockVersion",
		//"org.spockframework:spock-spring:$spockVersion",
	) {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

tasks.withType(Test) {
	maxParallelForks = 1
	maxHeapSize = "748m"
	useJUnitPlatform()
}

springBoot {
	buildInfo()
}


bootJar {
	archiveFileName = "service.jar"
	manifest {
		// TODO: fill in package name
		attributes 'Start-Class': 'com.optum.ct.<packagename>.Application'
	}
}